import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import "../styles/Main.css";
import { useUser } from "../UserContext";

const API_BASE = import.meta.env.VITE_API_BASE || "";

import withdrawIMG from "../assets/withdrawIcon.png";
import refferalsIMG from "../assets/refferalsIcon.png";
import tonusdtIMG from "../assets/tonusdtIcon.png";
import channelIMG from "../assets/channelIcon.png";
import usersIMG from "../assets/usersIcon.png";
import OneWinIMG from "../assets/OneWinIcon.png";
import JettonIMG from "../assets/JettonIcon.png";
import MostbetIMG from "../assets/MostbetIcon.png";
import TelegramIMG from "../assets/telegramIcon.png";
import SupportIMG from "../assets/supportIcon.png";
import usdtIMG from "../assets/usdtIcon.png";
import React from "react";
import { API_BASE } from "./Withdraw";

const JETTON_REF  = import.meta.env.VITE_JETTON_REF || ""; 

const MOSTBET_REF = import.meta.env.VITE_MOSTBET_REF || ""; 


const openTG = (url) => {
  const href = String(url || "").trim();
  const tg = window?.Telegram?.WebApp;
  if (tg?.openLink) {
    tg.openLink(href, { try_browser: true });
  } else if (tg?.openTelegramLink && /^https?:\/\/t\.me\//i.test(href)) {
    tg.openTelegramLink(href);
  } else {
    window.open(href, "_blank", "noopener,noreferrer");
  }
};



const OnexGifts = () => {

    const navigate = useNavigate();

    const { user, loading, refetchUser, updateUser } = useUser();

    const [tonToUsdRate, setTonToUsdRate] = useState(null); // how many USDT for 1 TON

    useEffect(() => {
      const fetchTonToUsdRate = async () => {
        try {
          const response = await fetch("https://api.binance.com/api/v3/ticker/price?symbol=TONUSDT");
          if (!response.ok) throw new Error(`Binance error: ${response.status}`);
          const data = await response.json();
          if (data && data.price) setTonToUsdRate(parseFloat(data.price));
        } catch (e) {
          console.error("TON/USDT rate fetch failed:", e);
        }
      };
      fetchTonToUsdRate();
    }, []);

    const usdToTon = (usd) => (tonToUsdRate ? Number(usd) / tonToUsdRate : 0);

    const usdtBalance = Number(user?.balanceTon ?? 0); // ‚ö†Ô∏è —Å–µ–π—á–∞—Å —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–º–µ–Ω–Ω–æ USDT
    const tonBalance  = usdToTon(usdtBalance);

    const [usdAvailable, setUsdAvailable] = useState(0);
    const [usdLocked, setUsdLocked] = useState(0);

    const availableTON = usdToTon(usdAvailable);
    const lockedTON    = usdToTon(usdLocked);

    const totalUSD = usdAvailable + usdLocked;
    const totalTON = usdToTon(totalUSD);

    useEffect(() => {
    if (!user?.telegramId || !API_BASE) return;

    fetch(`${API_BASE}/balances?telegramId=${user.telegramId}`)
        .then(r => r.json())
        .then(d => {
        if (d?.ok) {
            setUsdAvailable(Number(d.usdAvailable || 0));
            setUsdLocked(Number(d.usdLocked || 0));
        }
        })
        .catch(console.error);
    }, [user?.telegramId]);

    const [taskDone, setTaskDone] = useState(Boolean(user?.tasks?.channelSubscribed));

    // –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Å–≤–µ–∂–∏–π user –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç
    useEffect(() => {
    setTaskDone(Boolean(user?.tasks?.channelSubscribed));
    }, [user?.tasks?.channelSubscribed]);

    const [mostbetDone, setMostbetDone] = useState(Boolean(user?.tasks?.mostbetCompleted));
    useEffect(() => {
    setMostbetDone(Boolean(user?.tasks?.mostbetCompleted));
    }, [user?.tasks?.mostbetCompleted]);

    const telegramId  = user?.telegramId;
    const displayName = user?.firstName || user?.username || (telegramId ? `id${telegramId}` : "User");
    const displayUsername = user?.username ? `@${user.username}` : (telegramId ? `id${telegramId}` : "");
    const initials = (user?.firstName || user?.username || String(telegramId || "U"))
    .slice(0,2)
    .toUpperCase();


    const userLang = (window?.Telegram?.WebApp?.initDataUnsafe?.user?.language_code || navigator.language || "").toLowerCase();
    const isRussianLang = ["ru", "uk", "be", "kk", "uz", "ky", "tt"].some((code) => userLang.startsWith(code));

    const t = isRussianLang
    ? {
        title: "ONEX GIFTS",
        description1_part1:
          "–ü–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞—Ä–º–∏–Ω–≥—É –∏ DeFi –≤—ã",
        description1_part2:
          "–¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é A2V ‚Äî",
        description1_part3:
          "–≤—ã–ø–æ–ª–Ω–∏—Ç—å 2 —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å",
        description1_part4:
          "0.99 TON.",
        description2_part1:
          "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –µ—Å–ª–∏ –í—ã –ø–æ–ø–∞–¥–µ—Ç–µ –≤ —á–∏—Å–ª–æ",
        description2_part2:
          "–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –º–µ—Å—Ç–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –í–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω",
        description2_part3:
          "–º–∏–Ω—Ç –∫–ª—é—á–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ NFT.",
        claim: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
        completed: "–í–´–ü–û–õ–ù–ï–ù–û",
    }
    : {
        title: "ONEX GIFTS",
        description1_part1: "Before accessing farming and DeFi, you",
        description1_part2: "must pass A2V verification ‚Äî",
        description1_part3: "complete 2 ad tasks and receive",
        description1_part4: "0.99 TON.",
        description2_part1: "At the end of the giveaway, if you are among the",
        description2_part2: "winners, this section will allow you to",
        description2_part3: "mint a farming activation key in the form of an NFT.",
        claim: "Join",
        completed: "COMPLETED",
    };

    const openRef = (baseUrl) => {
      const url = String(baseUrl)
        .replace("{telegramId}", String(user?.telegramId || ""))
        .replace("{click_id}", `tg_${user?.telegramId || "0"}`);
      openTG(url);
    };

    const checkDeposit = async (minUsd) => {
      try {
        if (!user?.telegramId) return alert(isRussianLang ? "–û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram" : "Open via Telegram");
        const qs = new URLSearchParams({ userId: String(user.telegramId), minUsd: String(minUsd) });
        const r = await fetch(`${API_BASE}/check-casino-deposit?${qs.toString()}`);
        const d = await r.json();
        if (d?.ok && d.deposited) {
          return alert(isRussianLang ? "–î–µ–ø–æ–∑–∏—Ç –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ" : "Deposit detected ‚Äî task completed ‚úÖ");
        }
        const need = Number(d?.minUsd || minUsd || 0);
        const have = Number(d?.totalUsd || 0);
        if (need > 0) {
          const left = Math.max(0, need - have).toFixed(2);
          return alert(isRussianLang
            ? `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–∞. –ù—É–∂–Ω–æ: ${need}$, –µ—Å—Ç—å: ${have}$. –û—Å—Ç–∞–ª–æ—Å—å: ${left}$.`
            : `Insufficient deposit. Required: ${need}$, you have: ${have}$. Left: ${left}$.`);
        }
        return alert(isRussianLang ? "–î–µ–ø–æ–∑–∏—Ç –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." : "No deposit yet. Try again later.");
      } catch (e) {
        console.error("checkDeposit error", e);
        alert(isRussianLang ? "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞" : "Deposit check error");
      }
    };

    const checkDepositMostbet = async (minUsd) => {
    try {
        if (!user?.telegramId) {
        alert("–ù–µ—Ç telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        return;
        }

        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
        const checkUrl = `${API_BASE}/mostbet/check-deposit?telegramId=${user.telegramId}&minUsd=${minUsd}`;
        const r = await fetch(checkUrl);
        const d = await r.json();

        if (!r.ok || !d?.ok) throw new Error(d?.error || "Server error");

        if (!d.deposited) {
        const need = Number(d.minUsd || 0);
        const have = Number(d.fdpUsd || 0);
        const left = Math.max(0, need - have).toFixed(2);
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–∞. –ù—É–∂–Ω–æ ${need}$, –Ω–∞–π–¥–µ–Ω–æ ${have}$. –û—Å—Ç–∞–ª–æ—Å—å ${left}$.`);
        return;
        }

        // 2Ô∏è‚É£ –ï—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–∑—ã–≤–∞–µ–º verify –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
        const verifyResp = await fetch(`${API_BASE}/tasks/mostbet/verify`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ telegramId: user.telegramId, minUsd }),
        });

        const verifyData = await verifyResp.json();
        if (!verifyResp.ok || !verifyData?.ok) throw new Error(verifyData?.error || "–û—à–∏–±–∫–∞ verify");

        if (verifyData.status === "rewarded") {
        alert(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞–≥—Ä–∞–¥–∞: +${verifyData.reward} TON üéâ`);
        updateUser(verifyData.user);   // –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∑–∞–¥–∞–Ω–∏—è
        await refetchUser();
        } else if (verifyData.status === "already_completed") {
        alert("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ!");
        updateUser(verifyData.user);
        await refetchUser();
        } else if (verifyData.status === "not_completed") {
        alert("‚ùå –î–µ–ø–æ–∑–∏—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π).");
        }

    } catch (e) {
        console.error("checkDepositMostbet error:", e);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞");
    }
    };


    async function verifyChannel() {
    try {
        if (!user?.telegramId) return;
        const r = await fetch(`${API_BASE}/tasks/channel/verify`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ telegramId: user.telegramId }),
        });
        const data = await r.json();
        if (!data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏");

        if (data.status === "not_subscribed") {
        alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ –ü–†–û–í–ï–†–ò–¢–¨");
        return;
        }

        // 1) –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        if (data.user) {
        updateUser(data.user); // —Å–µ—Ä–≤–µ—Ä —É–∂–µ –≤–µ—Ä–Ω—É–ª –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else if (data.status === "rewarded") {
        // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ 'user' –Ω–µ –ø—Ä–∏—à—ë–ª
        updateUser({
            balanceTon: Number(user?.balanceTon || 0) + Number(data?.reward?.ton || 0),
            tasks: { ...(user?.tasks || {}), channelSubscribed: true },
        });
        } else if (data.status === "already_claimed") {
        updateUser({
            tasks: { ...(user?.tasks || {}), channelSubscribed: true },
        });
        }

        // 2) –∑–∞—Ç–µ–º –∂—ë—Å—Ç–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å –ë–î
        await refetchUser();

        if (data.status === "rewarded") {
        alert(`–ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞: +${data.reward.ton} TON üéâ`);
        } else if (data.status === "already_claimed") {
        // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        }
    } catch (e) {
        alert(e.message);
    }
    }

    return (
    <div className="App">
        <div className="Main_Window">   
            <div className="mainHomePageContainer">  
                <div className="headerContainer">
                    <div className="circleInHeaderContainer">
                        {user?.photoUrl ? (
                            <img src={user.photoUrl} className="userAvatar"/>
                        ) : (
                            <div className="circleName">
                                {loading ? "" : initials}
                            </div>
                        )}
                    </div>
                    <div className="nickNameContainer">
                        <div className="nickNameContainerPart1">{loading ? "–ó–∞–≥—Ä—É–∑–∫–∞" : displayName}</div>
                        <div className="nickNameContainerPart2">{loading ? "" : displayUsername}</div>
                    </div>
                    <div className="mainBalanceContainer">
                        <img src={tonusdtIMG}/>
                        <h2>{tonToUsdRate ? totalTON.toFixed(2) : "‚Ä¶"} TON | {totalUSD.toFixed(2)} USDT</h2> 
                    </div>
                    <div className="withdrawContainer" onClick={() => navigate("/withdraw")} role="button">
                        <img src={withdrawIMG} alt="withdraw" />
                    </div>
                    <div className="refferalsContainer">
                        <img src={refferalsIMG}/>
                    </div>
                </div>

                <div class="text5USDT-with-linesContainer">
                    <div class="line-left"></div>
                        <h2>–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 USDT</h2>
                    <div class="line-right"></div>
                </div>

                <div class="mainChannelTaskContainer">
                    <div class="mainChannelNameContainer">
                        <img src={channelIMG}/>
                        <div class="textChannelNameContainer">
                            <div class="textChannelNameContainerPart1">
                                AIMI Traffic
                            </div>
                            <div class="textChannelNameContainerPart2">
                                –ö–∞–Ω–∞–ª
                            </div>
                        </div>
                    </div>
                    <div class="titleAndBodyTextChannelNameContainer">
                        <div class="titleTextChannelNameContainer">
                            –ö–∞–Ω–∞–ª –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–µ
                        </div>
                        <div class="bodyTextChannelNameContainer">
                            AIMI Traffic –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å<br/>10 USDT –∑–∞ –∂–∏–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å –°–ù–ì —Ä–µ–≥–∏–æ–Ω–∞.<br/>–ú—ã –¥–µ–ª–∏–º—Å—è –Ω–∞–≥—Ä–∞–¥–æ–π —Å –í–∞–º–∏ 50/50.
                        </div>
                    </div>
                    <div className="taskChannelRewardAndUsersContainer">
                        <div className="taskChannelRewardContainer">
                            <img src={usdtIMG}/>
                            <h2>5 USDT</h2> 
                        </div>
                        <div className="taskChannelUsersContainer">
                            <img src={usersIMG}/>
                            <h2>2 472 –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ</h2> 
                        </div>
                    </div>
                        <div className="completeAndCheckChannelContainer">
                        {taskDone ? (
                            // ‚úÖ –≤–∞—Ä–∏–∞–Ω—Ç ¬´–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è¬ª
                            <div className="taskChannelCompletedContainer">
                                <h2>–í–´–ü–û–õ–ù–ï–ù–û</h2>
                            </div>
                        ) : (
                            // ‚¨ÖÔ∏è –≤–∞—Ä–∏–∞–Ω—Ç ¬´–¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è¬ª
                            <>
                            <div
                                className="completeChannelContainer"
                                onClick={() => openTG("https://t.me/aimi_traffic")}
                            >
                                <h2>–ü–û–î–ü–ò–°–ê–¢–¨–°–Ø</h2>
                            </div>
                            <div className="checkChannelContainer" onClick={verifyChannel}>
                                <h2>–ü–†–û–í–ï–†–ò–¢–¨</h2>
                            </div>
                            </>
                        )}
                    </div>
                </div>

                <div class="text25USDT-with-linesContainer">
                    <div class="line-left"></div> 
                        <h2>–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 25 USDT</h2> 
                    <div class="line-right"></div>
                </div> 
                
                {/* <div class="main1WINTaskContainer">
                    <div class="mainChannelNameContainer">
                        <img src={OneWinIMG}/>
                        <div class="textChannelNameContainer">
                            <div class="textChannelNameContainerPart1">
                                1WIN
                            </div>
                            <div class="text1WINNameContainerPart2">
                                –ö–∞–∑–∏–Ω–æ
                            </div>
                        </div>
                    </div>
                    <div class="titleAndBodyTextChannelNameContainer">
                        <div class="titleTextChannelNameContainer">
                            –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
                        </div>
                        <div class="bodyTextChannelNameContainer">
                            –í —Ñ–æ—Ä–º–∞—Ç–µ —É—Å–ª–æ–≤–∏–π CPA –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–µ–ø–æ-<br/>
                            –∑–∏—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 5$, –º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º 33% –æ—Ç<br/>
                            –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                        </div>
                    </div>
                    <div className="taskChannelRewardAndUsersContainer">
                        <div className="taskChannelRewardContainer">
                            <img src={tonusdtIMG}/>
                            <h2>3.6 TON | 10 USDT</h2> 
                        </div>
                        <div className="taskChannelUsersContainer">
                            <img src={usersIMG}/>
                            <h2>3 009 –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ</h2> 
                        </div>
                    </div>
                    <div className="completeAndCheckChannelContainer">
                        <div className="complete1WINContainer">
                            <h2>–í–´–ü–û–õ–ù–ò–¢–¨</h2>
                        </div>
                        <div className="checkChannelContainer">
                            <h2>–ü–†–û–í–ï–†–ò–¢–¨</h2>
                        </div>
                    </div>
                </div> */}

                <div class="mainJettonTaskContainer">
                    <div class="mainChannelNameContainer">
                        <img src={JettonIMG}/>
                        <div class="textChannelNameContainer">
                            <div class="textChannelNameContainerPart1">
                                JETTON
                            </div>
                            <div class="text1WINNameContainerPart2">
                                –ö–∞–∑–∏–Ω–æ
                            </div>
                        </div>
                    </div>
                    <div class="titleAndBodyTextChannelNameContainer">
                        <div class="titleTextChannelNameContainer">
                            –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
                        </div>
                        <div class="bodyTextChannelNameContainer">
                            –í —Ñ–æ—Ä–º–∞—Ç–µ —É—Å–ª–æ–≤–∏–π CPA –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–µ–ø–æ-<br/>
                            –∑–∏—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 5$, –º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º 33% –æ—Ç<br/>
                            –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                        </div>
                    </div>
                    <div className="taskChannelRewardAndUsersContainer">
                        <div className="taskChannelRewardContainer">
                            <img src={tonusdtIMG}/>
                            <h2>1.8 TON | 5 USDT</h2> 
                        </div>
                        <div className="taskChannelUsersContainer">
                            <img src={usersIMG}/>
                            <h2>1 636 –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ</h2> 
                        </div>
                    </div>
                    <div className="completeAndCheckChannelContainer">
                        <div className="complete1WINContainer" onClick={() => openRef(import.meta.env.VITE_JETTON_REF)}>
                            <h2>–í–´–ü–û–õ–ù–ò–¢–¨</h2>
                        </div>
                        <div className="checkChannelContainer" onClick={() => checkDeposit(5)} role="button">
                            <h2>–ü–†–û–í–ï–†–ò–¢–¨</h2>
                        </div>
                    </div>
                </div> 

                <div class="mainMostbetTaskContainer">
                    <div class="mainChannelNameContainer">
                        <img src={MostbetIMG}/>
                        <div class="textChannelNameContainer">
                            <div class="textChannelNameContainerPart1">
                                MOSTBET
                            </div>
                            <div class="text1WINNameContainerPart2">
                                –ö–∞–∑–∏–Ω–æ
                            </div>
                        </div>
                    </div>
                    <div class="titleAndBodyTextChannelNameContainer">
                        <div class="titleTextChannelNameContainer">
                            –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
                        </div>
                        <div class="bodyTextChannelNameContainer">
                            –í —Ñ–æ—Ä–º–∞—Ç–µ —É—Å–ª–æ–≤–∏–π CPA –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–µ–ø–æ-<br/>
                            –∑–∏—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 5$, –º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º 33% –æ—Ç<br/>
                            –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                        </div>
                    </div>
                    <div className="taskChannelRewardAndUsersContainer">
                        <div className="taskChannelRewardContainer">
                            <img src={tonusdtIMG}/>
                            <h2>3.6 TON | 10 USDT</h2> 
                        </div>
                        <div className="taskChannelUsersContainer">
                            <img src={usersIMG}/>
                            <h2>4 704 –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ</h2> 
                        </div>
                    </div>
                    <div className="completeAndCheckChannelContainer">
                    {mostbetDone ? (
                        <div className="taskChannelCompletedContainer">
                        <h2>–í–´–ü–û–õ–ù–ï–ù–û</h2>
                        </div>
                    ) : (
                        <>
                        <div
                            className="complete1WINContainer"
                            onClick={() => openRef(import.meta.env.VITE_MOSTBET_REF)}
                        >
                            <h2>–í–´–ü–û–õ–ù–ò–¢–¨</h2>
                        </div>
                        <div
                            className="checkChannelContainer"
                            onClick={() => checkDepositMostbet(5)}
                            role="button"
                        >
                            <h2>–ü–†–û–í–ï–†–ò–¢–¨</h2>
                        </div>
                        </>
                    )}
                    </div>
                </div>

                <div className="footerContainer">
                    <div className="footerTelegramChannel" onClick={() =>
                        window.Telegram?.WebApp?.openTelegramLink("https://t.me/aimi_traffic")
                    }>
                        <h2>AIMI TRAFFIC</h2>
                        <img src={TelegramIMG}/>
                    </div>
                    <div className="footerSupportButton" onClick={() =>
                        window.Telegram?.WebApp?.openTelegramLink("https://t.me/gostcust")
                    }>
                        <h2>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</h2>
                        <img src={SupportIMG} />
                    </div>
                </div>

            </div>
        </div>
    </div>
  );
};

export default OnexGifts;