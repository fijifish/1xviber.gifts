export interface ShowPromiseResult {
    done: boolean;
    description: string;
    state: "load" | "render" | "playing" | "destroy";
    error: boolean;
}
type BannerType = "RewardedVideo" | "FullscreenMedia";
type BlockId = `${number}` | `int-${number}`;
export interface AdsgramInitParams {
    blockId: BlockId;
    debug?: boolean;
    debugBannerType?: BannerType;
}
export type AdsgramProps = AdsgramInitParams & {
    onReward?: () => void;
    onError?: () => void;
};
export type EventType = "onReward" | "onComplete" | "onStart" | "onSkip" | "onBannerNotFound" | "onNonStopShow" | "onTooLongSession" | "onError";
export type HandlerType = () => void;
export type AdsgramMethods = {
    /**
     * Displays an ad and returns a promise with the result
     * @returns {Promise<ShowPromiseResult>} A promise that resolves when the ad is shown
     * @throws {Error} If the ad fails to display
     */
    show: () => Promise<ShowPromiseResult>;
    /**
     * Adds an event listener for Adsgram events
     * @param {EventType} event - The event type to listen for
     * @param {HandlerType} handler - The callback function to execute when the event occurs
     */
    addEventListener: (event: EventType, handler: HandlerType) => void;
    /**
     * Removes an event listener
     * @param {EventType} event - The event type to remove
     * @param {HandlerType} handler - The callback function to remove
     */
    removeEventListener: (event: EventType, handler: HandlerType) => void;
    /**
     * Cleans up resources and removes all event listeners
     */
    destroy: () => void;
};
export interface AdController {
    show(): Promise<ShowPromiseResult>;
    addEventListener(event: EventType, handler: HandlerType): void;
    removeEventListener(event: EventType, handler: HandlerType): void;
    destroy(): void;
}
declare global {
    interface Window {
        Adsgram?: {
            init(params: AdsgramInitParams): AdController;
        };
    }
}
export {};
