export type BlockId = `task-${number}`;
export type AdsgramEvent = CustomEvent<string>;
export interface AdsgramTaskCustomEventMap {
    reward: AdsgramEvent;
    onBannerNotFound: AdsgramEvent;
    onTooLongSession: AdsgramEvent;
    onError: AdsgramEvent;
}
export type EventHandler = (event: AdsgramEvent) => void;
export interface AdsgramTaskElement extends HTMLElement {
    addEventListener<K extends keyof AdsgramTaskCustomEventMap>(type: K, listener: (ev: AdsgramTaskCustomEventMap[K]) => void, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (ev: HTMLElementEventMap[K]) => void, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AdsgramTaskCustomEventMap>(type: K, listener: (ev: AdsgramTaskCustomEventMap[K]) => void, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (ev: HTMLElementEventMap[K]) => void, options?: boolean | AddEventListenerOptions): void;
}
