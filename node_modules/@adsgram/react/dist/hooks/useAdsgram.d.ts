/**
 * A custom React hook for integrating with Adsgram ad service.
 * Provides methods to show ads, manage event listeners, and clean up resources.
 *
 * @module useAdsgram
 * @param {AdsgramProps} props - Initialization parameters for Adsgram
 * @returns {AdsgramMethods} An object containing methods to interact with Adsgram
 *
 */
import type { AdsgramMethods, AdsgramProps } from "@adsgram/common";
/**
 * React hook for managing Adsgram ad integration
 * @param {AdsgramProps} props - Configuration parameters for Adsgram initialization
 * @returns {AdsgramMethods} Methods to interact with the Adsgram sdk
 * @param {string} params.blockId - Unique identifier for the ad block
 * @param {boolean} [params.debug=false] - Enable [debug](https://docs.adsgram.ai/publisher/api-reference#parameters) mode
 * @param {BannerType} [params.debugBannerType] - Forced banner type in debug mode
 * @param {HandlerType} [params.onReward] - Callback when user completes a rewarded ad
 * @param {HandlerType} [params.onError] - Callback when ad playback fails
 *
 * @example
 * basic usage example
 * ```tsx
 * import { useAdsgram } from "@adsgram/react";
 *
 * function MyComponent() {
 *   const { show } = useAdsgram({
 *     blockId: "123",
 *     onReward: () => {
 *       // user watch ad till the end
 *       // your code to reward user for rewarded format
 *     },
 *     onError: () => {
 *       // user get error during playing ad
 *       // do nothing or whatever you want
 *     },
 *   });
 *
 *   return (
 *     <button onClick={show}>Show Ad</button>
 *   );
 * }
 * ```
 */
export declare function useAdsgram({ blockId, debug, debugBannerType, onReward, onError, }: AdsgramProps): AdsgramMethods;
