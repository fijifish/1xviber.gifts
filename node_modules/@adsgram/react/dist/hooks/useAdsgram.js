import { loadScript, prepareInitParams } from "@adsgram/common";
import { useCallback, useEffect, useRef } from "react";
/**
 * React hook for managing Adsgram ad integration
 * @param {AdsgramProps} props - Configuration parameters for Adsgram initialization
 * @returns {AdsgramMethods} Methods to interact with the Adsgram sdk
 * @param {string} params.blockId - Unique identifier for the ad block
 * @param {boolean} [params.debug=false] - Enable [debug](https://docs.adsgram.ai/publisher/api-reference#parameters) mode
 * @param {BannerType} [params.debugBannerType] - Forced banner type in debug mode
 * @param {HandlerType} [params.onReward] - Callback when user completes a rewarded ad
 * @param {HandlerType} [params.onError] - Callback when ad playback fails
 *
 * @example
 * basic usage example
 * ```tsx
 * import { useAdsgram } from "@adsgram/react";
 *
 * function MyComponent() {
 *   const { show } = useAdsgram({
 *     blockId: "123",
 *     onReward: () => {
 *       // user watch ad till the end
 *       // your code to reward user for rewarded format
 *     },
 *     onError: () => {
 *       // user get error during playing ad
 *       // do nothing or whatever you want
 *     },
 *   });
 *
 *   return (
 *     <button onClick={show}>Show Ad</button>
 *   );
 * }
 * ```
 */
export function useAdsgram({ blockId, debug, debugBannerType, onReward, onError, }) {
    const adController = useRef(null);
    const initPromise = useRef(null);
    const ensureInitialized = useCallback(async () => {
        if (adController.current)
            return adController.current;
        if (initPromise.current)
            return initPromise.current.then(() => {
                if (!adController.current) {
                    throw new Error("Adsgram controller failed to initialize.");
                }
                return adController.current;
            });
        initPromise.current = loadScript().then(() => {
            const initParams = prepareInitParams({ blockId, debug, debugBannerType });
            if (!window.Adsgram) {
                throw new Error("Adsgram is not available on the window object.");
            }
            adController.current = window.Adsgram.init(initParams);
            if (onReward) {
                adController.current.addEventListener("onReward", onReward);
            }
            if (onError) {
                adController.current.addEventListener("onError", onError);
            }
        });
        await initPromise.current;
        if (!adController.current) {
            throw new Error("Adsgram controller failed to initialize.");
        }
        return adController.current;
    }, [blockId, debug, debugBannerType, onError, onReward]);
    useEffect(() => {
        ensureInitialized();
        return () => {
            const controller = adController.current;
            if (!controller)
                return;
            controller.destroy();
            if (onReward)
                controller.removeEventListener("onReward", onReward);
            if (onError)
                controller.removeEventListener("onError", onError);
        };
    }, [ensureInitialized, onError, onReward]);
    return {
        show: async () => {
            const controller = await ensureInitialized();
            return controller.show();
        },
        addEventListener: (event, handler) => {
            ensureInitialized().then((controller) => {
                controller.addEventListener(event, handler);
            });
        },
        removeEventListener: (event, handler) => {
            adController.current?.removeEventListener(event, handler);
        },
        destroy: () => {
            adController.current?.destroy();
        },
    };
}
