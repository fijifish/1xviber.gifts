import { jsx as _jsx } from "react/jsx-runtime";
import { getObjectKeys, } from "@adsgram/common";
import { useEffect, useRef, useState } from "react";
/**
 * A React component wrapper for the Adsgram Task custom element.
 * Handles initialization and event binding for the Adsgram task functionality.
 *
 * @component
 * @property {TaskProps} props - Component properties
 * @returns {JSX.Element | null} The rendered task element or null if not ready
 * @property {BlockId} props.blockId - The unique identifier for the task block
 * @property {boolean} props.debug - Enable debug mode to get test task from server
 * @property {string} props.className - Additional CSS class names
 * @property {React.ReactNode} props.children - Child elements to render inside the task component
 * @property {EventHandler} props.onReward - Callback for reward events
 * @property {EventHandler} props.onBannerNotFound - Callback for banner not found events
 * @property {EventHandler} props.onTooLongSession - Callback for too long session events
 * @property {EventHandler} props.onError - Callback for error events
 *
 * @example
 * ```tsx
 * import { AdsgramTask } from "@adsgram/react";
 *
 * function Task() {
 *   const handleReward = (event: CustomEvent<string>) => {
 *     console.log("User earned reward:", event.detail);
 *   };
 *
 *   const handleError = (event: CustomEvent<string>) => {
 *     console.error("Task error:", event.detail);
 *   };
 *
 *   return (
 *     <AdsgramTask
 *       blockId="task-123"
 *       className={styles.task}
 *       onReward={handleReward}
 *       onError={handleError}
 *     >
 *       <span slot="reward" className={styles.task__reward}>
 *         1000 coins
 *       </span>
 *       <div slot="button" className={styles.task__button}>
 *         go
 *       </div>
 *       <div slot="claim" className={styles.button_claim}>
 *         claim
 *       </div>
 *       <div slot="done" className={styles.task__button_done}>
 *         done
 *       </div>
 *     </AdsgramTask>
 *   );
 * }
 * ```
 */
export const AdsgramTask = ({ blockId, debug, className, onReward, onBannerNotFound, onTooLongSession, onError, children, }) => {
    const taskRef = useRef(null);
    const [ready, setReady] = useState(false);
    // Wait for custom element to be defined
    useEffect(() => {
        customElements.whenDefined("adsgram-task").then(() => {
            setReady(true);
        });
    }, []);
    // Setup and cleanup event listeners
    useEffect(() => {
        const task = taskRef.current;
        if (!task || !ready)
            return;
        const eventMap = {
            reward: onReward,
            onBannerNotFound: onBannerNotFound,
            onTooLongSession: onTooLongSession,
            onError: onError,
        };
        getObjectKeys(eventMap).forEach((eventName) => {
            const handler = eventMap[eventName];
            if (handler) {
                task.addEventListener(eventName, handler);
            }
        });
        return () => {
            getObjectKeys(eventMap).forEach((eventName) => {
                const handler = eventMap[eventName];
                if (handler) {
                    task.removeEventListener(eventName, handler);
                }
            });
        };
    }, [onReward, onBannerNotFound, onTooLongSession, onError, ready]);
    // Don't render until custom element is ready
    if (!ready)
        return null;
    return (_jsx("adsgram-task", { ref: taskRef, "data-debug": debug ?? false, "data-block-id": blockId, className: className, children: children }));
};
